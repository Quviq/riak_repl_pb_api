%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(riak_repl_pb).

-export([encode_msg/1, encode_msg/2]).
-export([encode/1]). %% epb compatibility
-export([encode_rpbreplgetclusteridreq/1]).
-export([encode_rpbreplgetreq/1]).
-export([encode_rpbreplgetclusteridresp/1]).

-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([decode/2]). %% epb compatibility
-export([decode_rpbreplgetclusteridreq/1]).
-export([decode_rpbreplgetreq/1]).
-export([decode_rpbreplgetclusteridresp/1]).

-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_repl_pb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type rpbreplgetclusteridreq() :: #rpbreplgetclusteridreq{}.
-type rpbreplgetreq() :: #rpbreplgetreq{}.
-type rpbreplgetclusteridresp() :: #rpbreplgetclusteridresp{}.
-export_type(['rpbreplgetclusteridreq'/0, 'rpbreplgetreq'/0, 'rpbreplgetclusteridresp'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpbreplgetclusteridreq{} ->
	  e_msg_rpbreplgetclusteridreq(Msg, TrUserData);
      #rpbreplgetreq{} ->
	  e_msg_rpbreplgetreq(Msg, TrUserData);
      #rpbreplgetclusteridresp{} ->
	  e_msg_rpbreplgetclusteridresp(Msg, TrUserData)
    end.


%% epb compatibility
-spec encode(_) -> binary().
encode(Msg) -> encode_msg(Msg).

-spec encode_rpbreplgetclusteridreq(_) -> binary().
encode_rpbreplgetclusteridreq(Msg) -> encode_msg(Msg).

-spec encode_rpbreplgetreq(_) -> binary().
encode_rpbreplgetreq(Msg) -> encode_msg(Msg).

-spec encode_rpbreplgetclusteridresp(_) -> binary().
encode_rpbreplgetclusteridresp(Msg) -> encode_msg(Msg).


e_msg_rpbreplgetclusteridreq(_Msg, _TrUserData) -> <<>>.

e_msg_rpbreplgetreq(Msg, TrUserData) ->
    e_msg_rpbreplgetreq(Msg, <<>>, TrUserData).


e_msg_rpbreplgetreq(#rpbreplgetreq{bucket = F1,
				   key = F2, cluster_id = F3, r = F4, pr = F5,
				   basic_quorum = F6, notfound_ok = F7,
				   if_modified = F8, head = F9,
				   deletedvclock = F10, sloppy_quorum = F11,
				   n_val = F12},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_bytes(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_varint(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_bytes(TrF8, <<B7/binary, 66>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_bool(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     e_varint(TrF12, <<B11/binary, 96>>)
	   end
    end.

e_msg_rpbreplgetclusteridresp(Msg, TrUserData) ->
    e_msg_rpbreplgetclusteridresp(Msg, <<>>, TrUserData).


e_msg_rpbreplgetclusteridresp(#rpbreplgetclusteridresp{cluster_id
							   = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.



e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      rpbreplgetclusteridreq ->
	  d_msg_rpbreplgetclusteridreq(Bin, TrUserData);
      rpbreplgetreq -> d_msg_rpbreplgetreq(Bin, TrUserData);
      rpbreplgetclusteridresp ->
	  d_msg_rpbreplgetclusteridresp(Bin, TrUserData)
    end.


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    decode_msg(Bin, MsgName).

decode_rpbreplgetclusteridreq(Bin)
    when is_binary(Bin) ->
    decode_msg(Bin, rpbreplgetclusteridreq).

decode_rpbreplgetreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbreplgetreq).

decode_rpbreplgetclusteridresp(Bin)
    when is_binary(Bin) ->
    decode_msg(Bin, rpbreplgetclusteridresp).



d_msg_rpbreplgetclusteridreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridreq(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_rpbreplgetclusteridreq(<<>>, 0, 0,
					  _) ->
    #rpbreplgetclusteridreq{};
dfp_read_field_def_rpbreplgetclusteridreq(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_rpbreplgetclusteridreq(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_rpbreplgetclusteridreq(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbreplgetclusteridreq(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_rpbreplgetclusteridreq(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_rpbreplgetclusteridreq(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_rpbreplgetclusteridreq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_rpbreplgetclusteridreq(Rest, 0, 0,
						       TrUserData);
      5 ->
	  skip_32_rpbreplgetclusteridreq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_rpbreplgetclusteridreq(<<>>, 0, 0,
					 _) ->
    #rpbreplgetclusteridreq{}.

skip_varint_rpbreplgetclusteridreq(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_rpbreplgetclusteridreq(Rest, Z1, Z2,
				       TrUserData);
skip_varint_rpbreplgetclusteridreq(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridreq(Rest, Z1, Z2,
					      TrUserData).


skip_length_delimited_rpbreplgetclusteridreq(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbreplgetclusteridreq(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_rpbreplgetclusteridreq(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbreplgetclusteridreq(Rest2, 0, 0,
					      TrUserData).


skip_32_rpbreplgetclusteridreq(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridreq(Rest, Z1, Z2,
					      TrUserData).


skip_64_rpbreplgetclusteridreq(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridreq(Rest, Z1, Z2,
					      TrUserData).


d_msg_rpbreplgetreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbreplgetreq(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbreplgetreq(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_bucket(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 TrUserData);
dfp_read_field_def_rpbreplgetreq(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_key(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_cluster_id(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
dfp_read_field_def_rpbreplgetreq(<<32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_r(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_pr(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_basic_quorum(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<56, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_notfound_ok(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
dfp_read_field_def_rpbreplgetreq(<<66, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_if_modified(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
dfp_read_field_def_rpbreplgetreq(<<72, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_head(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<80, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_deletedvclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<88, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_sloppy_quorum(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_rpbreplgetreq(<<96, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    d_field_rpbreplgetreq_n_val(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12,
				TrUserData);
dfp_read_field_def_rpbreplgetreq(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, _) ->
    #rpbreplgetreq{bucket = F1, key = F2, cluster_id = F3,
		   r = F4, pr = F5, basic_quorum = F6, notfound_ok = F7,
		   if_modified = F8, head = F9, deletedvclock = F10,
		   sloppy_quorum = F11, n_val = F12};
dfp_read_field_def_rpbreplgetreq(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 TrUserData) ->
    dg_read_field_def_rpbreplgetreq(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData).

dg_read_field_def_rpbreplgetreq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbreplgetreq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, TrUserData);
dg_read_field_def_rpbreplgetreq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbreplgetreq_bucket(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12,
				       TrUserData);
      18 ->
	  d_field_rpbreplgetreq_key(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData);
      26 ->
	  d_field_rpbreplgetreq_cluster_id(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, TrUserData);
      32 ->
	  d_field_rpbreplgetreq_r(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, TrUserData);
      40 ->
	  d_field_rpbreplgetreq_pr(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, TrUserData);
      48 ->
	  d_field_rpbreplgetreq_basic_quorum(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, TrUserData);
      56 ->
	  d_field_rpbreplgetreq_notfound_ok(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, TrUserData);
      66 ->
	  d_field_rpbreplgetreq_if_modified(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, TrUserData);
      72 ->
	  d_field_rpbreplgetreq_head(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
      80 ->
	  d_field_rpbreplgetreq_deletedvclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      88 ->
	  d_field_rpbreplgetreq_sloppy_quorum(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      96 ->
	  d_field_rpbreplgetreq_n_val(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbreplgetreq(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10, F11, F12,
					  TrUserData);
	    1 ->
		skip_64_rpbreplgetreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
	    2 ->
		skip_length_delimited_rpbreplgetreq(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8, F9,
						    F10, F11, F12, TrUserData);
	    5 ->
		skip_32_rpbreplgetreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, TrUserData)
	  end
    end;
dg_read_field_def_rpbreplgetreq(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, _) ->
    #rpbreplgetreq{bucket = F1, key = F2, cluster_id = F3,
		   r = F4, pr = F5, basic_quorum = F6, notfound_ok = F7,
		   if_modified = F8, head = F9, deletedvclock = F10,
		   sloppy_quorum = F11, n_val = F12}.

d_field_rpbreplgetreq_bucket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_bucket(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, TrUserData);
d_field_rpbreplgetreq_bucket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbreplgetreq(Rest2, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_key(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_key(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      TrUserData);
d_field_rpbreplgetreq_key(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbreplgetreq(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				     F11, F12, TrUserData).


d_field_rpbreplgetreq_cluster_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_cluster_id(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_cluster_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbreplgetreq(Rest2, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7, F8, F9, F10,
				     F11, F12, TrUserData).


d_field_rpbreplgetreq_r(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_r(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    TrUserData);
d_field_rpbreplgetreq_r(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     NewFValue, F5, F6, F7, F8, F9, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_pr(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_pr(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			     TrUserData);
d_field_rpbreplgetreq_pr(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7, F8, F9, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_basic_quorum(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_basic_quorum(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_basic_quorum(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, F11, F12, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7, F8, F9, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_notfound_ok(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_notfound_ok(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_notfound_ok(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				  F10, F11, F12, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, NewFValue, F8, F9, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_if_modified(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_if_modified(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_if_modified(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				  F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbreplgetreq(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, NewFValue, F9, F10,
				     F11, F12, TrUserData).


d_field_rpbreplgetreq_head(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_head(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
d_field_rpbreplgetreq_head(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10, F11,
			   F12, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, NewFValue, F10, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_deletedvclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_deletedvclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_deletedvclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    _, F11, F12, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, NewFValue, F11,
				     F12, TrUserData).


d_field_rpbreplgetreq_sloppy_quorum(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_sloppy_quorum(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_rpbreplgetreq_sloppy_quorum(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, _, F12, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, NewFValue,
				     F12, TrUserData).


d_field_rpbreplgetreq_n_val(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetreq_n_val(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, TrUserData);
d_field_rpbreplgetreq_n_val(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbreplgetreq(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, F11,
				     NewFValue, TrUserData).


skip_varint_rpbreplgetreq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  TrUserData) ->
    skip_varint_rpbreplgetreq(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
skip_varint_rpbreplgetreq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  TrUserData) ->
    dfp_read_field_def_rpbreplgetreq(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData).


skip_length_delimited_rpbreplgetreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbreplgetreq(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
skip_length_delimited_rpbreplgetreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbreplgetreq(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData).


skip_32_rpbreplgetreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		      TrUserData) ->
    dfp_read_field_def_rpbreplgetreq(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData).


skip_64_rpbreplgetreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		      TrUserData) ->
    dfp_read_field_def_rpbreplgetreq(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData).


d_msg_rpbreplgetclusteridresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridresp(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_rpbreplgetclusteridresp(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, TrUserData) ->
    d_field_rpbreplgetclusteridresp_cluster_id(Rest, Z1, Z2,
					       F1, TrUserData);
dfp_read_field_def_rpbreplgetclusteridresp(<<>>, 0, 0,
					   F1, _) ->
    #rpbreplgetclusteridresp{cluster_id = F1};
dfp_read_field_def_rpbreplgetclusteridresp(Other, Z1,
					   Z2, F1, TrUserData) ->
    dg_read_field_def_rpbreplgetclusteridresp(Other, Z1, Z2,
					      F1, TrUserData).

dg_read_field_def_rpbreplgetclusteridresp(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbreplgetclusteridresp(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbreplgetclusteridresp(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbreplgetclusteridresp_cluster_id(Rest, 0, 0,
						     F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbreplgetclusteridresp(Rest, 0, 0, F1,
						    TrUserData);
	    1 ->
		skip_64_rpbreplgetclusteridresp(Rest, 0, 0, F1,
						TrUserData);
	    2 ->
		skip_length_delimited_rpbreplgetclusteridresp(Rest, 0,
							      0, F1,
							      TrUserData);
	    5 ->
		skip_32_rpbreplgetclusteridresp(Rest, 0, 0, F1,
						TrUserData)
	  end
    end;
dg_read_field_def_rpbreplgetclusteridresp(<<>>, 0, 0,
					  F1, _) ->
    #rpbreplgetclusteridresp{cluster_id = F1}.

d_field_rpbreplgetclusteridresp_cluster_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbreplgetclusteridresp_cluster_id(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
d_field_rpbreplgetclusteridresp_cluster_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbreplgetclusteridresp(Rest2, 0, 0,
					       NewFValue, TrUserData).


skip_varint_rpbreplgetclusteridresp(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbreplgetclusteridresp(Rest, Z1, Z2, F1,
					TrUserData);
skip_varint_rpbreplgetclusteridresp(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridresp(Rest, Z1, Z2,
					       F1, TrUserData).


skip_length_delimited_rpbreplgetclusteridresp(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbreplgetclusteridresp(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
skip_length_delimited_rpbreplgetclusteridresp(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbreplgetclusteridresp(Rest2, 0, 0,
					       F1, TrUserData).


skip_32_rpbreplgetclusteridresp(<<_:32, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridresp(Rest, Z1, Z2,
					       F1, TrUserData).


skip_64_rpbreplgetclusteridresp(<<_:64, Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbreplgetclusteridresp(Rest, Z1, Z2,
					       F1, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #rpbreplgetclusteridreq{} ->
	  merge_msg_rpbreplgetclusteridreq(Prev, New, TrUserData);
      #rpbreplgetreq{} ->
	  merge_msg_rpbreplgetreq(Prev, New, TrUserData);
      #rpbreplgetclusteridresp{} ->
	  merge_msg_rpbreplgetclusteridresp(Prev, New, TrUserData)
    end.

merge_msg_rpbreplgetclusteridreq(_Prev, New,
				 _TrUserData) ->
    New.

merge_msg_rpbreplgetreq(#rpbreplgetreq{r = PFr,
				       pr = PFpr, basic_quorum = PFbasic_quorum,
				       notfound_ok = PFnotfound_ok,
				       if_modified = PFif_modified,
				       head = PFhead,
				       deletedvclock = PFdeletedvclock,
				       sloppy_quorum = PFsloppy_quorum,
				       n_val = PFn_val},
			#rpbreplgetreq{bucket = NFbucket, key = NFkey,
				       cluster_id = NFcluster_id, r = NFr,
				       pr = NFpr, basic_quorum = NFbasic_quorum,
				       notfound_ok = NFnotfound_ok,
				       if_modified = NFif_modified,
				       head = NFhead,
				       deletedvclock = NFdeletedvclock,
				       sloppy_quorum = NFsloppy_quorum,
				       n_val = NFn_val},
			_) ->
    #rpbreplgetreq{bucket = NFbucket, key = NFkey,
		   cluster_id = NFcluster_id,
		   r =
		       if NFr =:= undefined -> PFr;
			  true -> NFr
		       end,
		   pr =
		       if NFpr =:= undefined -> PFpr;
			  true -> NFpr
		       end,
		   basic_quorum =
		       if NFbasic_quorum =:= undefined -> PFbasic_quorum;
			  true -> NFbasic_quorum
		       end,
		   notfound_ok =
		       if NFnotfound_ok =:= undefined -> PFnotfound_ok;
			  true -> NFnotfound_ok
		       end,
		   if_modified =
		       if NFif_modified =:= undefined -> PFif_modified;
			  true -> NFif_modified
		       end,
		   head =
		       if NFhead =:= undefined -> PFhead;
			  true -> NFhead
		       end,
		   deletedvclock =
		       if NFdeletedvclock =:= undefined -> PFdeletedvclock;
			  true -> NFdeletedvclock
		       end,
		   sloppy_quorum =
		       if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
			  true -> NFsloppy_quorum
		       end,
		   n_val =
		       if NFn_val =:= undefined -> PFn_val;
			  true -> NFn_val
		       end}.

merge_msg_rpbreplgetclusteridresp(#rpbreplgetclusteridresp{},
				  #rpbreplgetclusteridresp{cluster_id =
							       NFcluster_id},
				  _) ->
    #rpbreplgetclusteridresp{cluster_id = NFcluster_id}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpbreplgetclusteridreq{} ->
	  v_msg_rpbreplgetclusteridreq(Msg,
				       [rpbreplgetclusteridreq], TrUserData);
      #rpbreplgetreq{} ->
	  v_msg_rpbreplgetreq(Msg, [rpbreplgetreq], TrUserData);
      #rpbreplgetclusteridresp{} ->
	  v_msg_rpbreplgetclusteridresp(Msg,
					[rpbreplgetclusteridresp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_rpbreplgetclusteridreq(#rpbreplgetclusteridreq{},
			     _Path, _) ->
    ok.

v_msg_rpbreplgetreq(#rpbreplgetreq{bucket = F1,
				   key = F2, cluster_id = F3, r = F4, pr = F5,
				   basic_quorum = F6, notfound_ok = F7,
				   if_modified = F8, head = F9,
				   deletedvclock = F10, sloppy_quorum = F11,
				   n_val = F12},
		    Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    v_type_bytes(F3, [cluster_id | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [r | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [pr | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [basic_quorum | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [notfound_ok | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [if_modified | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [head | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [deletedvclock | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [sloppy_quorum | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [n_val | Path])
    end,
    ok.

v_msg_rpbreplgetclusteridresp(#rpbreplgetclusteridresp{cluster_id
							   = F1},
			      Path, _) ->
    v_type_bytes(F1, [cluster_id | Path]), ok.

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, rpbreplgetclusteridreq}, []},
     {{msg, rpbreplgetreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, cluster_id}, {fnum, 3}, {rnum, 4},
	{type, bytes}, {occurrence, required}, {opts, []}],
       [{name, r}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 5}, {rnum, 6}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 6}, {rnum, 7},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, if_modified}, {fnum, 8}, {rnum, 9},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, head}, {fnum, 9}, {rnum, 10}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, deletedvclock}, {fnum, 10}, {rnum, 11},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbreplgetclusteridresp},
      [[{name, cluster_id}, {fnum, 1}, {rnum, 2},
	{type, bytes}, {occurrence, required}, {opts, []}]]}].


get_msg_names() ->
    [rpbreplgetclusteridreq, rpbreplgetreq,
     rpbreplgetclusteridresp].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(rpbreplgetclusteridreq) -> [];
find_msg_def(rpbreplgetreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, cluster_id}, {fnum, 3}, {rnum, 4},
      {type, bytes}, {occurrence, required}, {opts, []}],
     [{name, r}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 5}, {rnum, 6}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 6}, {rnum, 7},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, if_modified}, {fnum, 8}, {rnum, 9},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, head}, {fnum, 9}, {rnum, 10}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, deletedvclock}, {fnum, 10}, {rnum, 11},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbreplgetclusteridresp) ->
    [[{name, cluster_id}, {fnum, 1}, {rnum, 2},
      {type, bytes}, {occurrence, required}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
